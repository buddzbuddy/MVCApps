
@{
    ViewBag.Title = "Карта";
}

<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
<!--leaflet tool links/srcs-->

<script src="~/Scripts/Leaflet/Leaflet.draw.js"></script>
<link href="~/Content/Leaflet/leaflet.draw.css" rel="stylesheet" />
<link href="~/Content/Leaflet/leaflet.label.css" rel="stylesheet" />

<script src="~/Scripts/Leaflet/Toolbar.js"></script>
<script src="~/Scripts/Leaflet/Tooltip.js"></script>

<script src="~/Scripts/Leaflet/ext/GeometryUtil.js"></script>
<script src="~/Scripts/Leaflet/ext/LatLngUtil.js"></script>
<script src="~/Scripts/Leaflet/ext/LineUtil.Intersect.js"></script>
<script src="~/Scripts/Leaflet/ext/Polygon.Intersect.js"></script>
<script src="~/Scripts/Leaflet/ext/Polyline.Intersect.js"></script>

<script src="~/Scripts/Leaflet/draw/DrawToolbar.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Feature.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.SimpleShape.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Polyline.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Circle.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Marker.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Polygon.js"></script>
<script src="~/Scripts/Leaflet/draw/handler/Draw.Rectangle.js"></script>

<script src="~/Scripts/Leaflet/edit/EditToolbar.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/EditToolbar.Edit.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/EditToolbar.Delete.js"></script>

<script src="~/Scripts/Leaflet/Control.Draw.js"></script>

<script src="~/Scripts/Leaflet/edit/handler/Edit.Poly.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/Edit.SimpleShape.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/Edit.Circle.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/Edit.Rectangle.js"></script>
<script src="~/Scripts/Leaflet/edit/handler/Edit.Marker.js"></script>

<script src="~/Scripts/Leaflet/Label/Label.js"></script>
<script src="~/Scripts/Leaflet/Label/BaseMarkerMethods.js"></script>
<script src="~/Scripts/Leaflet/Label/Marker.Label.js"></script>
<script src="~/Scripts/Leaflet/Label/CircleMarker.Label.js"></script>
<script src="~/Scripts/Leaflet/Label/Path.Label.js"></script>
<script src="~/Scripts/Leaflet/Label/Map.Label.js"></script>
<script src="~/Scripts/Leaflet/Label/FeatureGroup.Label.js"></script>
<style>
    #map {
        width: 1050px;
        height: 600px;
    }
</style>

<div id="map"></div>
<script type='text/javascript'>
    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
			osmAttrib = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors',
			osm = L.tileLayer(osmUrl, { maxZoom: 18, attribution: osmAttrib });
    map = new L.Map('map', { layers: [osm], center: new L.LatLng(42.874722, 74.612222), zoom: 13 }),
    drawnItems = L.featureGroup().addTo(map);

    map.addControl(new L.Control.Draw({
        edit: { featureGroup: drawnItems }
    }));

    $.getJSON('@(Url.Action("Markers"))', function (data) {
        $(data).each(function (i2, m) {
            var marker = L.marker([m.lat, m.lng], { id: m.Id }).bindPopup(L.popup().setContent('Marker Id:' + m.Id)).bindLabel('Marker Id:' + m.Id, {
                noHide: true
            }).addTo(map);
            drawnItems.addLayer(marker);
            //console.log(marker);
        });
        map.fitBounds(drawnItems.getBounds());
    });

    $.getJSON('@(Url.Action("Polygons"))', function (data) {
        $(data).each(function (i2, p) {
            var latlngs = [];
            $(p.LatLngs).each(function (i3, latlng) {
                latlngs.push(L.latLng(parseFloat(latlng[0]), parseFloat(latlng[1])));//formating to required LatLng format
            });
            var polygon = L.polygon(latlngs,
                {
                    color: 'red',
                    weight: 3,
                    opacity: 0.5,
                    smoothFactor: 1,
                    id: p.Id
                }).bindPopup(L.popup().setContent('Polygon Id:' + p.Id + '<br/><b>' + p.Name + '</b>')).bindLabel('Polygon Id:' + p.Id + '<br/><b>' + p.Name + '</b>').addTo(map);
            drawnItems.addLayer(polygon);
        });
        map.fitBounds(drawnItems.getBounds());
    });
    map.on('draw:created', function (event) {
        var layer = event.layer;
        var mPopup = L.popup();
        layer.bindPopup(mPopup);
        if (event.layerType == 'marker') {
            $.getJSON('@(Url.Action("CreateMarker"))' + '?lat=' + layer.getLatLng().lat + '&lng=' + layer.getLatLng().lng, function (data) {
                layer.setPopupContent('Marker Id:' + data.Id);
                layer.options.id = data.Id;
            });
        }
        else if (event.layerType == 'polygon') {
            var lats = [];
            var lngs = [];
            $(layer.getLatLngs()).each(function (i, latlng) {
                lats.push(latlng.lat);
                lngs.push(latlng.lng);
            });
            if (lats.length > 0 && lngs.length > 0 && lats.length == lngs.length) {

                $.post('@(Url.Action("CreatePolygon"))', { lats: lats, lngs: lngs }, function (data, status) {
                    if (data == 0) {
                        console.log('Error!');
                    }
                    else {
                        layer.options.id = data.Id;
                        layer.bindPopup(L.popup().setContent('Polygon Id:' + data.Id + '<br/><b>' + data.Name + '</b>'));
                    }
                }, 'json');
            }
        }

        drawnItems.addLayer(layer);
        //console.log(layer);
    });



    map.on('draw:edited', function (e) {
        var layers = e.layers;
        layers.eachLayer(function (layer) {
            if (layer instanceof L.Marker) {
                if (layer.options.id != null) {
                    $.getJSON('@(Url.Action("EditMarker"))' + '?Id=' + layer.options.id + '&lat=' + layer.getLatLng().lat + '&lng=' + layer.getLatLng().lng, function (data) {
                        if (data == 1) {
                            return;
                        }
                        else console.log('The marker didnt edited in DB!');
                    });
                }
                else console.log('The marker.options.id not found!');
            }
            else if (layer instanceof L.Polygon) {
                var lats = [];
                var lngs = [];
                $(layer.getLatLngs()).each(function (i, latlng) {
                    lats.push(latlng.lat);
                    lngs.push(latlng.lng);
                });
                if (lats.length > 0 && lngs.length > 0 && lats.length == lngs.length) {

                    $.post('@(Url.Action("EditPolygon"))', { Id: layer.options.id, lats: lats, lngs: lngs }, function (data, status) {
                        if (data == '1') {
                            return;
                        }
                        else
                            console.log(data);
                    }, 'json');
                }
            }
        });
    });

    map.on('draw:deleted', function (e) {
        var layers = e.layers;
        layers.eachLayer(function (layer) {
            if (layer instanceof L.Marker) {
                $.post('@Url.Content("DeleteMarker")', { Id: layer.options.id }, function (data, status) {
                    if (data == '1') {
                        return;
                    }
                    else
                        console.log(data);
                }, 'json');
            }
            else if (layer instanceof L.Polygon) {
                $.post('@(Url.Action("DeletePolygon"))', { Id: layer.options.id }, function (data, status) {
                    if (data == '1') {
                        return;
                    }
                    else
                        console.log(data);
                }, 'json');
            }
        });
    });


</script>